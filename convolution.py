# -*- coding: utf-8 -*-
"""Convolution.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GwWHWrGaoaWW8GotpAU8Bcie1AF0buN6
"""

!pip install tensorflow==2.16.1

import tensorflow as tf
import keras as kr
import matplotlib
import numpy as np

tf.__version__, kr.__version__, matplotlib.__version__, np.__version__

from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Input, Dense, Flatten, Dropout, Conv2D, MaxPooling2D
from tensorflow.keras.utils import utils as np_utils

from tensorflow.keras.prepocessing.image import ImageDataGenerator

import matplotlib.pyplot as plt
from sklearn.model_selection import StratifiedKFold

(X_train, y_train), (X_test, y_test) = mnist.load_data()

plt.imshow(X_train[0], cmap='gray')
plt.title("Class: " + str(y_train[0]))

X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)

X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')

X_train /= 255

X_test /=255

y_train = np_utils.to_categorical(y_train, 10)
y_test = np_utils.to_categorical(y_test,10)

seed = 5
np.random.seed(seed)

kfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=seed)

result = []
for index_train, index_test in kfold.split(X, np.zeros(shape=(y.shape[0],1)))
  neural_network = Sequential()
  neural_network.add(InputLayer(shape=(28,28,1)))

  neural_network.add(Conv2D(filters= 32, kernel_size=(3,3), activation='relu'))
  neural_network.add(BatchNormalization())
  rede_neural.add(MaxPooling2D(pool_size=(2,2)))

  neural_network.add(Conv2D(filters= 32, kernel_size=(3,3), activation='relu'))
  neural_network.add(BatchNormalization())
  rede_neural.add(MaxPooling2D(pool_size=(2,2)))

  rede_nerual.add(Flatten())

  rede_neural.add(Dense(units=128, activation='relu'))
  rede_neura.add(Dropout(0.2))
  rede_neural.add(Dense(units=128, activation='relu'))
  rede_neura.add(Dropout(0.2))
  rede_neural.add(Dense(units=10, activation='softmax'))
  neural_network.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
  neural_network.fit(X_train[index_train], y_train[index_train], batch_size=128, epochs=5, validation_data=(X_test, y_teste))
  accur = neural_network.evaluate(X_test[index_test], y_test[index_test])
  result.append(accur[1])

np.array(result).mean()

np.array(result).std()

#Trainning - Generator
generator_train = ImageDataGenerator(rotation_range=7, horizontal_flip=True, shear_range=0.2, height_shift_range=0.07, zoom_range=0.2)

generator_test = ImageDataGenerator()

dataset_train = generator_train.flow(X_train, y_train, batch_size=128)
dataset_test = generator_test.flow(X_test, y_test, batch_size=128)

neural_network.fit(dataset_train, epochs=5, validation_data=dataset_test)