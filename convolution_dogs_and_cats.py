# -*- coding: utf-8 -*-
"""Convolution - dogs and cats.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11OSJwzcAqlRYoeHiSt90LH5rCCOYIa04
"""

!pip install tensorflow==2.16.1

import numpy as np
import tensorflow tf

tf.__version__, np.__version__

import tempfile
import zipfile

temp_dir = tempfile.TemporaryDirectory()

with zipfile.ZipFile('dataset.zip', 'r') as zip:
  zip.extractall(temp_dir.name)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Input, Dense, Flatten, Dropout, Conv2D, MaxPooling2D, BatchNormalization
from tensorflow.keras.utils import utils as np_utils
from tensoflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator

neural_network = Sequential()
neural_network.add(InputLayer(shape=(64, 64, 3)))

neural_network.add(Conv2D(32, (3,3), activation='relu'))
neural_network.add(BatchNormalization())
neural_network.add(MaxPooling2D(pool_size=(2,2)))

neural_network.add(Conv2D(32, (3,3), activation='relu'))
neural_network.add(BatchNormalization())
neural_network.add(MaxPooling2D(pool_size=(2,2)))

neural_network.add(Dropout(0.25))

neural_network.add(Flatten())

neural_network.add(Dense(units=128, activation='relu'))
neural_network.add(Dropout(0.2))
neural_network.add(Dense(units=128, activation='relu'))
neural_network.add(Dropout(0.2))

neural_network.add(Dense(units=1, activation='sigmoid'))

neural_network.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

generator_train = ImageDataGenerator(rescale=1./255, rotation_range=7, horizontal_flip=True, shear_range=0.2, height_shift_range=0.07, zoom_range=0.2)
generator_test = ImageDataGenerator(rescale=1./255)

dataset_train = generator_train.flow_from_directory(f'{temp_dir.name}/dataset/training_set', target_size = (64, 64),batch_size=32, class_mode='binary')

dataset_test = generator_train.flow_from_directory(f'{temp_dir.name}/dataset/test_set', target_size = (64, 64),batch_size=32, class_mode='binary')

neural_network.fit(dataset_train, epochs=10, validation_data=dataset_test)

